{"ast":null,"code":"import _slicedToArray from \"D:\\\\codeX\\\\draw-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\codeX\\\\draw-app\\\\src\\\\components\\\\Inputes.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { DoneCommands } from \"./DoneCommands\";\nimport { actionAddCommandLine } from \"../store/actions/commands\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\";\nexport const Inputes = () => {\n  const dispatch = useDispatch();\n\n  const createCanvas = ({\n    width,\n    height\n  }) => dispatch(actionCreateCanvas({\n    width,\n    height\n  }));\n\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\n\n  const changeCanvasHeigth = height => dispatch(actionChangeCanvasHeight(height));\n\n  const changeCanvasWidth = width => dispatch(actionChangeCanvasWidth(width));\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        valueTextArea = _useState2[0],\n        setValueTextArea = _useState2[1];\n\n  const _useSelector = useSelector(state => state.canvas),\n        width = _useSelector.width,\n        height = _useSelector.height;\n\n  useEffect(() => {\n    changeCanvasHeigth(height);\n  }, [height]);\n  useEffect(() => {\n    changeCanvasWidth(width);\n  }, [width]);\n\n  const onChangeTextArea = str => {\n    if (str[str.length - 1] === \"\\n\") {\n      addCommandLine(str);\n      console.log(str);\n      str = \"\";\n    }\n\n    setValueTextArea(str);\n  };\n\n  const createCanvass = () => {\n    console.log(\"\".concat(width, \", \").concat(height));\n    createCanvas(width, height);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"inputes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Draw app\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Create your picture\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Enter size of canvas, x\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Width\",\n    onChange: e => changeCanvasWidth(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Height\",\n    onChange: e => changeCanvasHeigth(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => createCanvas({\n      width,\n      height\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Create\"), React.createElement(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Enter commands\",\n    value: valueTextArea,\n    onChange: e => onChangeTextArea(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(DoneCommands, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["D:/codeX/draw-app/src/components/Inputes.js"],"names":["React","useState","useEffect","DoneCommands","actionAddCommandLine","useSelector","useDispatch","actionChangeCanvasHeight","actionChangeCanvasWidth","actionCreateCanvas","Inputes","dispatch","createCanvas","width","height","addCommandLine","line","changeCanvasHeigth","changeCanvasWidth","valueTextArea","setValueTextArea","state","canvas","onChangeTextArea","str","length","console","log","createCanvass","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DoneCommands } from \"./DoneCommands\";\r\nimport { actionAddCommandLine } from \"../store/actions/commands\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\"\r\n\r\nexport const Inputes = () => {\r\n  const dispatch = useDispatch();\r\n  const createCanvas = ({ width, height }) => dispatch(actionCreateCanvas({ width, height }));\r\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\r\n  const changeCanvasHeigth = ( height ) => dispatch(actionChangeCanvasHeight( height ));\r\n  const changeCanvasWidth = ( width ) => dispatch(actionChangeCanvasWidth( width ));\r\n  const [valueTextArea, setValueTextArea] = useState(\"\");\r\n  const { width, height } = useSelector(state => state.canvas);\r\n\r\n  useEffect(() => {\r\n    changeCanvasHeigth( height );\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    changeCanvasWidth( width );\r\n  }, [width]);\r\n\r\n\r\n  const onChangeTextArea = str => {\r\n    if (str[str.length - 1] === \"\\n\") {\r\n      addCommandLine(str);\r\n      console.log(str);\r\n      str = \"\";\r\n    }\r\n    setValueTextArea(str);\r\n  };\r\n\r\n  const createCanvass = () => {\r\n    console.log(`${width}, ${height}`);\r\n    createCanvas(width, height);\r\n  }\r\n\r\n  return (\r\n    <div className=\"inputes\">\r\n      <h1>Draw app</h1>\r\n      <p>Create your picture</p>\r\n      <p>Enter size of canvas, x</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Width\"\r\n        onChange={e => changeCanvasWidth(e.target.value)}\r\n      ></input>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Height\"\r\n        onChange={e => changeCanvasHeigth(e.target.value)}\r\n      ></input>\r\n      <button onClick={()=>createCanvas({ width, height })}>Create</button>\r\n      <textarea\r\n        type=\"text\"\r\n        placeholder=\"Enter commands\"\r\n        value={valueTextArea}\r\n        onChange={e => onChangeTextArea(e.target.value)}\r\n      ></textarea>\r\n      <DoneCommands />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}