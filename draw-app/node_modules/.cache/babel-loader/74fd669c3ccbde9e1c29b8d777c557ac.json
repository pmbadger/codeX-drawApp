{"ast":null,"code":"import _slicedToArray from \"D:\\\\codeX\\\\draw-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\codeX\\\\draw-app\\\\src\\\\components\\\\Inputes.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Canvas } from \"./components/Canvas\";\nimport { DoneCommands } from \"./components/DoneCommands\";\nimport { actionAddCommandLine } from \"./store/actions/lines\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth } from \"../store/actions/canvas\";\nexport const Inputes = () => {\n  const dispatch = useDispatch();\n\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\n\n  const changeCanvasHeigth = height => dispatch(actionChangeCanvasHeight(height));\n\n  const changeCanvasWidth = width => dispatch(actionChangeCanvasWidth(width));\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        valueTextArea = _useState2[0],\n        setValueTextArea = _useState2[1];\n\n  const _useSelector = useSelector(state => state.canvas),\n        width = _useSelector.width,\n        height = _useSelector.height;\n\n  const onChangeTextArea = str => {\n    if (str[str.length - 1] === \"\\n\") {\n      addCommandLine(str);\n      console.log(str);\n      str = \"\";\n    }\n\n    setValueTextArea(str);\n  };\n\n  useEffect(() => {\n    changeCanvasHeigth(height);\n  }, [height]);\n  useEffect(() => {\n    changeCanvasWidth(width);\n  }, [width]);\n  return React.createElement(\"div\", {\n    className: \"inputes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Draw app\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Create your picture\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Enter size of canvas, x\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Width\",\n    onChange: e => changeCanvasWidth(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Height\",\n    onChange: e => changeCanvasHeigth(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Enter commands\",\n    value: valueTextArea,\n    onChange: e => onChangeTextArea(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(DoneCommands, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["D:/codeX/draw-app/src/components/Inputes.js"],"names":["React","useState","useEffect","Canvas","DoneCommands","actionAddCommandLine","useSelector","useDispatch","actionChangeCanvasHeight","actionChangeCanvasWidth","Inputes","dispatch","addCommandLine","line","changeCanvasHeigth","height","changeCanvasWidth","width","valueTextArea","setValueTextArea","state","canvas","onChangeTextArea","str","length","console","log","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,wBAAT,EAAmCC,uBAAnC,QAAkE,yBAAlE;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;;AACA,QAAMK,cAAc,GAAGC,IAAI,IAAIF,QAAQ,CAACN,oBAAoB,CAACQ,IAAD,CAArB,CAAvC;;AACA,QAAMC,kBAAkB,GAAKC,MAAF,IAAcJ,QAAQ,CAACH,wBAAwB,CAAEO,MAAF,CAAzB,CAAjD;;AACA,QAAMC,iBAAiB,GAAKC,KAAF,IAAaN,QAAQ,CAACF,uBAAuB,CAAEQ,KAAF,CAAxB,CAA/C;;AAJ2B,oBAKehB,QAAQ,CAAC,EAAD,CALvB;AAAA;AAAA,QAKpBiB,aALoB;AAAA,QAKLC,gBALK;;AAAA,uBAMDb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,MAAhB,CANV;AAAA,QAMnBJ,KANmB,gBAMnBA,KANmB;AAAA,QAMZF,MANY,gBAMZA,MANY;;AAQ3B,QAAMO,gBAAgB,GAAGC,GAAG,IAAI;AAC9B,QAAIA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAH,KAAwB,IAA5B,EAAkC;AAChCZ,MAAAA,cAAc,CAACW,GAAD,CAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAA,MAAAA,GAAG,GAAG,EAAN;AACD;;AACDJ,IAAAA,gBAAgB,CAACI,GAAD,CAAhB;AACD,GAPD;;AASArB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,kBAAkB,CAAEC,MAAF,CAAlB;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,iBAAiB,CAAEC,KAAF,CAAjB;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAHF,EAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,QAAQ,EAAEU,CAAC,IAAIX,iBAAiB,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EASE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,QAAQ,EAAEF,CAAC,IAAIb,kBAAkB,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAcE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,gBAFd;AAGE,IAAA,KAAK,EAAEX,aAHT;AAIE,IAAA,QAAQ,EAAES,CAAC,IAAIL,gBAAgB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAoBE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF;AAwBD,CAlDM","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Canvas } from \"./components/Canvas\";\r\nimport { DoneCommands } from \"./components/DoneCommands\";\r\nimport { actionAddCommandLine } from \"./store/actions/lines\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth } from \"../store/actions/canvas\"\r\n\r\nexport const Inputes = () => {\r\n  const dispatch = useDispatch();\r\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\r\n  const changeCanvasHeigth = ( height ) => dispatch(actionChangeCanvasHeight( height ));\r\n  const changeCanvasWidth = ( width ) => dispatch(actionChangeCanvasWidth( width ));\r\n  const [valueTextArea, setValueTextArea] = useState(\"\");\r\n  const { width, height } = useSelector(state => state.canvas);\r\n\r\n  const onChangeTextArea = str => {\r\n    if (str[str.length - 1] === \"\\n\") {\r\n      addCommandLine(str);\r\n      console.log(str);\r\n      str = \"\";\r\n    }\r\n    setValueTextArea(str);\r\n  };\r\n\r\n  useEffect(() => {\r\n    changeCanvasHeigth( height );\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    changeCanvasWidth( width );\r\n  }, [width]);\r\n\r\n\r\n  return (\r\n    <div className=\"inputes\">\r\n      <h1>Draw app</h1>\r\n      <p>Create your picture</p>\r\n      <p>Enter size of canvas, x</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Width\"\r\n        onChange={e => changeCanvasWidth(e.target.value)}\r\n      ></input>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Height\"\r\n        onChange={e => changeCanvasHeigth(e.target.value)}\r\n      ></input>\r\n      <textarea\r\n        type=\"text\"\r\n        placeholder=\"Enter commands\"\r\n        value={valueTextArea}\r\n        onChange={e => onChangeTextArea(e.target.value)}\r\n      ></textarea>\r\n      <DoneCommands />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}