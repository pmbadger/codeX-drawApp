{"ast":null,"code":"import _slicedToArray from \"D:\\\\codeX\\\\draw-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\codeX\\\\draw-app\\\\src\\\\components\\\\Inputes.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { DoneCommands } from \"./DoneCommands\";\nimport { actionAddCommandLine } from \"../store/actions/commands\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\";\nexport const Inputes = () => {\n  const dispatch = useDispatch();\n\n  const createCanvas = ({\n    widthCanvas,\n    heightCanvas\n  }) => dispatch(actionCreateCanvas({\n    widthCanvas,\n    heightCanvas\n  }));\n\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        valueTextArea = _useState2[0],\n        setValueTextArea = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        widthCanvas = _useState4[0],\n        setWidthCanvas = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        heightCanvas = _useState6[0],\n        setHeightCanvas = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        widthCanvasError = _useState8[0],\n        setWidthCanvasError = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        heightCanvasError = _useState10[0],\n        setHeightCanvasError = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        mainError = _useState12[0],\n        setMainError = _useState12[1];\n\n  const _useSelector = useSelector(state => state),\n        error = _useSelector.error;\n\n  console.log(\"Error: \".concat(error));\n\n  const onChangeTextArea = str => {\n    if (str[str.length - 1] === \"\\n\") {\n      addCommandLine(str);\n      console.log(str);\n      str = \"\";\n    }\n\n    setValueTextArea(str);\n  };\n\n  const validateWidthCanvas = ({\n    widthCanvas\n  }) => {\n    const regExp = /^\\d+$/;\n\n    if (!regExp.test(widthCanvas)) {\n      setWidthCanvasError(\"Enter only digits\");\n    } else setWidthCanvasError(\"\");\n  };\n\n  const validateHeightCanvas = ({\n    heightCanvas\n  }) => {\n    const regExp = /^\\d+$/;\n\n    if (!regExp.test(heightCanvas)) {\n      setHeightCanvasError(\"Enter only digits\");\n    } else setHeightCanvasError(\"\");\n  };\n\n  useEffect(() => {\n    validateWidthCanvas({\n      widthCanvas\n    });\n  }, [widthCanvas]);\n  useEffect(() => {\n    validateHeightCanvas({\n      heightCanvas\n    });\n  }, [heightCanvas]);\n\n  const tryCreateCanvas = ({\n    widthCanvas,\n    heightCanvas\n  }) => {\n    if (widthCanvas !== \"\" && heightCanvas !== \"\" && widthCanvasError === \"\" && heightCanvasError === \"\") {\n      console.log(\"\".concat(widthCanvas, \", \").concat(heightCanvas));\n      setMainError(\"\");\n      createCanvas({\n        widthCanvas,\n        heightCanvas\n      });\n    } else {\n      setMainError(\"Bad input\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"inputes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Draw app\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Create your picture\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Enter size of canvas, x\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Width\",\n    onChange: e => setWidthCanvas(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, widthCanvasError), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Height\",\n    onChange: e => setHeightCanvas(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, heightCanvasError), React.createElement(\"button\", {\n    className: \"create-canvas\",\n    onClick: () => tryCreateCanvas({\n      widthCanvas,\n      heightCanvas\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Create\"), React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, mainError), React.createElement(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Enter commands\",\n    value: valueTextArea,\n    onChange: e => onChangeTextArea(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, error), React.createElement(DoneCommands, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["D:/codeX/draw-app/src/components/Inputes.js"],"names":["React","useState","useEffect","DoneCommands","actionAddCommandLine","useSelector","useDispatch","actionChangeCanvasHeight","actionChangeCanvasWidth","actionCreateCanvas","Inputes","dispatch","createCanvas","widthCanvas","heightCanvas","addCommandLine","line","valueTextArea","setValueTextArea","setWidthCanvas","setHeightCanvas","widthCanvasError","setWidthCanvasError","heightCanvasError","setHeightCanvasError","mainError","setMainError","state","error","console","log","onChangeTextArea","str","length","validateWidthCanvas","regExp","test","validateHeightCanvas","tryCreateCanvas","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DoneCommands } from \"./DoneCommands\";\r\nimport { actionAddCommandLine } from \"../store/actions/commands\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\"\r\n\r\nexport const Inputes = () => {\r\n  const dispatch = useDispatch();\r\n  const createCanvas = ({ widthCanvas, heightCanvas }) => dispatch(actionCreateCanvas({ widthCanvas, heightCanvas }));\r\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\r\n  const [valueTextArea, setValueTextArea] = useState(\"\");\r\n  const [widthCanvas, setWidthCanvas] = useState(\"\");\r\n  const [heightCanvas, setHeightCanvas] = useState(\"\");\r\n  const [widthCanvasError, setWidthCanvasError] = useState(\"\");\r\n  const [heightCanvasError, setHeightCanvasError] = useState(\"\");\r\n  const [mainError, setMainError] = useState(\"\");\r\n  const {error} = useSelector(state => state);\r\n  console.log(`Error: ${error}`);\r\n  \r\n\r\n  const onChangeTextArea = str => {\r\n    if (str[str.length - 1] === \"\\n\") {\r\n      addCommandLine(str);\r\n      console.log(str);\r\n      str = \"\";\r\n    }\r\n    setValueTextArea(str);\r\n  };\r\n\r\n  const validateWidthCanvas = ({ widthCanvas }) => {\r\n    const regExp = /^\\d+$/;\r\n      if (!regExp.test(widthCanvas)) {\r\n        setWidthCanvasError(\"Enter only digits\");\r\n      }\r\n        else setWidthCanvasError(\"\");\r\n  };\r\n\r\n  const validateHeightCanvas = ({ heightCanvas }) => {\r\n    const regExp = /^\\d+$/;\r\n      if (!regExp.test(heightCanvas)) {\r\n        setHeightCanvasError(\"Enter only digits\");\r\n      }\r\n        else setHeightCanvasError(\"\");\r\n  };\r\n\r\n  useEffect(()=>{\r\n    validateWidthCanvas({widthCanvas})\r\n  },[widthCanvas])\r\n\r\n  useEffect(()=>{\r\n    validateHeightCanvas({heightCanvas})\r\n  },[heightCanvas])\r\n\r\n  const tryCreateCanvas = ({ widthCanvas, heightCanvas }) => {\r\n    if(widthCanvas!==\"\" && heightCanvas!==\"\" && widthCanvasError===\"\" && heightCanvasError===\"\"){\r\n      console.log(`${widthCanvas}, ${heightCanvas}`);\r\n      setMainError(\"\");\r\n      createCanvas({widthCanvas, heightCanvas});\r\n    }\r\n    else{\r\n      setMainError(\"Bad input\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"inputes\">\r\n      <h1>Draw app</h1>\r\n      <p>Create your picture</p>\r\n      <p>Enter size of canvas, x</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Width\"\r\n        onChange={e => setWidthCanvas(e.target.value)}\r\n      ></input>\r\n      <span className=\"error\">{widthCanvasError}</span>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Height\"\r\n        onChange={e => setHeightCanvas(e.target.value)}\r\n      ></input>\r\n       <span className=\"error\">{heightCanvasError}</span>\r\n      <button className=\"create-canvas\" onClick={()=>tryCreateCanvas({ widthCanvas, heightCanvas })}>Create</button>\r\n      <span className=\"error\">{mainError}</span>\r\n      <textarea\r\n        type=\"text\"\r\n        placeholder=\"Enter commands\"\r\n        value={valueTextArea}\r\n        onChange={e => onChangeTextArea(e.target.value)}\r\n      ></textarea>\r\n      <span>{error}</span>\r\n      <DoneCommands />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}