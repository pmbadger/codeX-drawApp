{"ast":null,"code":"import _defineProperty from \"D:\\\\codeX\\\\draw-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ACTION_ADD_INPUT_LINE, ACTION_ADD_LINE, ACTION_ADD_INPUT_RECTANGLE, ACTION_CHANGE_CANVAS } from \"../actions/actionTypes\";\nconst initialState = {\n  linesInput: [],\n  lines: [],\n  rectanglesInput: [],\n  canvas: {\n    width: 0,\n    height: 0\n  }\n};\nexport const figureReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_ADD_INPUT_LINE:\n      return _objectSpread({}, state, {\n        linesInput: [...state.linesInput, action.payload]\n      });\n\n    case ACTION_ADD_LINE:\n      return _objectSpread({}, state, {\n        lines: [...state.lines, action.payload]\n      });\n\n    case ACTION_ADD_INPUT_RECTANGLE:\n      return _objectSpread({}, state, {\n        rectanglesInput: [...state.rectanglesInput, action.payload]\n      });\n\n    case ACTION_CHANGE_CANVAS:\n      return _objectSpread({}, state, {\n        canvas: {\n          width: action.payload.width,\n          height: action.payload.height\n        }\n      });\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};","map":{"version":3,"sources":["D:/codeX/draw-app/src/store/reducers/reducer.js"],"names":["ACTION_ADD_INPUT_LINE","ACTION_ADD_LINE","ACTION_ADD_INPUT_RECTANGLE","ACTION_CHANGE_CANVAS","initialState","linesInput","lines","rectanglesInput","canvas","width","height","figureReduser","state","action","type","payload"],"mappings":";;;;;;AAAA,SACEA,qBADF,EAEEC,eAFF,EAGEC,0BAHF,EAIEC,oBAJF,QAKO,wBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,eAAe,EAAE,EAHE;AAInBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB;AAJW,CAArB;AAOA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,qBAAL;AACE,+BAAYY,KAAZ;AAAmBP,QAAAA,UAAU,EAAE,CAAC,GAAGO,KAAK,CAACP,UAAV,EAAsBQ,MAAM,CAACE,OAA7B;AAA/B;;AACA,SAAKd,eAAL;AACA,+BAAYW,KAAZ;AAAmBN,QAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBO,MAAM,CAACE,OAAxB;AAA1B;;AACF,SAAKb,0BAAL;AACE,+BAAYU,KAAZ;AAAmBL,QAAAA,eAAe,EAAE,CAAC,GAAGK,KAAK,CAACL,eAAV,EAA2BM,MAAM,CAACE,OAAlC;AAApC;;AACF,SAAKZ,oBAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN,KAAxB;AAA+BC,UAAAA,MAAM,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAAtD;AAFV;;AAIF;AAAS;AACP,iCACKE,KADL;AAGD;AAhBH;AAkBD,CAnBM","sourcesContent":["import {\r\n  ACTION_ADD_INPUT_LINE,\r\n  ACTION_ADD_LINE,\r\n  ACTION_ADD_INPUT_RECTANGLE,\r\n  ACTION_CHANGE_CANVAS\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  linesInput: [],\r\n  lines: [],\r\n  rectanglesInput: [],\r\n  canvas: { width: 0, height: 0 }\r\n};\r\n\r\nexport const figureReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_ADD_INPUT_LINE:\r\n      return { ...state, linesInput: [...state.linesInput, action.payload] };\r\n      case ACTION_ADD_LINE:\r\n      return { ...state, lines: [...state.lines, action.payload] };\r\n    case ACTION_ADD_INPUT_RECTANGLE:\r\n      return { ...state, rectanglesInput: [...state.rectanglesInput, action.payload] };\r\n    case ACTION_CHANGE_CANVAS:\r\n      return {\r\n        ...state,\r\n        canvas: { width: action.payload.width, height: action.payload.height }\r\n      };\r\n    default: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}