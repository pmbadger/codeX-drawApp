{"ast":null,"code":"import _slicedToArray from \"D:\\\\codeX\\\\draw-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\codeX\\\\draw-app\\\\src\\\\components\\\\Inputes.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { DoneCommands } from \"./DoneCommands\";\nimport { actionAddCommandLine } from \"../store/actions/commands\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\";\nexport const Inputes = () => {\n  const dispatch = useDispatch();\n\n  const createCanvas = ({\n    width,\n    height\n  }) => dispatch(actionCreateCanvas({\n    width,\n    height\n  }));\n\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        valueTextArea = _useState2[0],\n        setValueTextArea = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        widthCanvas = _useState4[0],\n        setWidthCanvas = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        heightCanvas = _useState6[0],\n        setHeightCanvas = _useState6[1];\n\n  const onChangeTextArea = str => {\n    if (str[str.length - 1] === \"\\n\") {\n      addCommandLine(str);\n      console.log(str);\n      str = \"\";\n    }\n\n    setValueTextArea(str);\n  };\n\n  const validationCanvas = ({\n    widthCanvas,\n    heightCanvas\n  }) => {\n    if (widthCanvas !== \"\" && heightCanvas !== 0) {\n      console.log(\"\".concat(widthCanvas, \", \").concat(heightCanvas));\n      createCanvas({\n        widthCanvas,\n        heightCanvas\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"inputes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Draw app\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Create your picture\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Enter size of canvas, x\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Width\",\n    onChange: e => setWidthCanvas(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Height\",\n    onChange: e => setHeightCanvas(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"create-canvas\",\n    onClick: () => validationCanvas({\n      widthCanvas,\n      heightCanvas\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Create\"), React.createElement(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Enter commands\",\n    value: valueTextArea,\n    onChange: e => onChangeTextArea(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(DoneCommands, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["D:/codeX/draw-app/src/components/Inputes.js"],"names":["React","useState","useEffect","DoneCommands","actionAddCommandLine","useSelector","useDispatch","actionChangeCanvasHeight","actionChangeCanvasWidth","actionCreateCanvas","Inputes","dispatch","createCanvas","width","height","addCommandLine","line","valueTextArea","setValueTextArea","widthCanvas","setWidthCanvas","heightCanvas","setHeightCanvas","onChangeTextArea","str","length","console","log","validationCanvas","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DoneCommands } from \"./DoneCommands\";\r\nimport { actionAddCommandLine } from \"../store/actions/commands\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionChangeCanvasHeight, actionChangeCanvasWidth, actionCreateCanvas } from \"../store/actions/canvas\"\r\n\r\nexport const Inputes = () => {\r\n  const dispatch = useDispatch();\r\n  const createCanvas = ({ width, height }) => dispatch(actionCreateCanvas({ width, height }));\r\n  const addCommandLine = line => dispatch(actionAddCommandLine(line));\r\n  const [valueTextArea, setValueTextArea] = useState(\"\");\r\n  const [widthCanvas, setWidthCanvas] = useState(\"\");\r\n  const [heightCanvas, setHeightCanvas] = useState(\"\");\r\n\r\n  const onChangeTextArea = str => {\r\n    if (str[str.length - 1] === \"\\n\") {\r\n      addCommandLine(str);\r\n      console.log(str);\r\n      str = \"\";\r\n    }\r\n    setValueTextArea(str);\r\n  };\r\n\r\n  const validationCanvas = ({ widthCanvas, heightCanvas }) => {\r\n    if(widthCanvas!==\"\" && heightCanvas!==0){\r\n      console.log(`${widthCanvas}, ${heightCanvas}`);\r\n      createCanvas({widthCanvas, heightCanvas});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"inputes\">\r\n      <h1>Draw app</h1>\r\n      <p>Create your picture</p>\r\n      <p>Enter size of canvas, x</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Width\"\r\n        onChange={e => setWidthCanvas(e.target.value)}\r\n      ></input>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Height\"\r\n        onChange={e => setHeightCanvas(e.target.value)}\r\n      ></input>\r\n      <button className=\"create-canvas\" onClick={()=>validationCanvas({ widthCanvas, heightCanvas })}>Create</button>\r\n      <textarea\r\n        type=\"text\"\r\n        placeholder=\"Enter commands\"\r\n        value={valueTextArea}\r\n        onChange={e => onChangeTextArea(e.target.value)}\r\n      ></textarea>\r\n      <DoneCommands />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}